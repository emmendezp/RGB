[{"id":0,"href":"/RGB/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/RGB/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/RGB/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":3,"href":"/RGB/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":4,"href":"/RGB/docs/Ejercicios/","title":"Ejercicios","section":"Docs","content":" Ejercicios # Ejercicios del curso\nEjercicios # Ejercicio1 Ejercicio 1 # Ejercicio 1 Let rgb1 and rgb2 be two rgb colors. What would rgb1 * rgb2 mean? RGB # Se refiere a un sistema para representar los colores que se utilizan en la pantalla de un ordenador. RGB es una combinación de rojo, verde y azul. Estos colores pueden combinarse en varias proporciones para obtener cualquier color del espectro visible. Cada nivel se mide por el rango de números decimales de 0 a 255 (256 niveles para cada color). Ejercicio2 Ejercicio 2 # Ejercicio 2 Develop a terrain visualization application Mach band # Las bandas de Mach son una ilusión óptica que parte de una imagen con dos bandas, una iluminada y la otra oscura, separadas por una estrecha banda central coloreada con un gradiente de iluminado a oscuro. El ojo humano percibe dos estrechas bandas de diferente luminosidad, que no están presentes en la imagen verdadera, a cada lado del gradiente. Ejercicio3 Ejercicio 3 # Ejercicio 3 Research some dither visual apps. Dithering # Es una técnica usada en computación gráfica para crear la ilusión de profundidad de color en imágenes con una paleta de colores limitada. En una imagen tramada, los colores no disponibles en la paleta se aproximan por una difusión de píxeles de color dentro de la gama de colores disponibles. El ojo humano percibe la difusión como una mezcla de los colores dentro de ésta. "},{"id":5,"href":"/RGB/docs/Ejercicios/Ejercicio1/","title":"Ejercicio1","section":"Ejercicios","content":" Ejercicio 1 # Ejercicio 1\nLet rgb1 and rgb2 be two rgb colors. What would rgb1 * rgb2 mean? RGB # Se refiere a un sistema para representar los colores que se utilizan en la pantalla de un ordenador. RGB es una combinación de rojo, verde y azul. Estos colores pueden combinarse en varias proporciones para obtener cualquier color del espectro visible.\nCada nivel se mide por el rango de números decimales de 0 a 255 (256 niveles para cada color). Por ejemplo, si un color tiene cero azul, será una mezcla de rojo y verde. Esto significa que podemos generar 256 x 256 x 256 = 16.777.216 colores diferentes con este modelo.\nUn formato de color RGB se representa por sus valores de rojo, verde y azul, Ejemplo:\nRGB = (54, 155, 229) | 54 = Rojo, 155 = Verde and 229 = Azul Multiplicación de colores # La multiplicación de dos colores RGB es una operación puntual. Cada elemento del color se multiplica componente a componente.\nEjemplo:\nRGB1 = (0, 255, 255)/255 -\u0026gt; (0,1,1) | Cyan RGB2 = (255, 0, 255)/255 -\u0026gt; (1,0,1) | Magneta RGB1 * RGB2 = R(0*1)+G(1*0)+B(1*1) = (0,0,1)*255 -\u0026gt; (0,0,255) (0,0,255) | Azul Código # Multiplicación de colores {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;470\u0026#34; height=\u0026#34;450\u0026#34; \u0026gt;}} let r, g,b,r1, g1, b1 ; function setup() { createCanvas(450, 400); // colores aleatorios r = random(255); g = random(255); b = random(255); r1 = random(255); g1 = random(255); b1 = random(255); } function draw() { blendMode(BLEND) background(\u0026#34;white\u0026#34;); blendMode(MULTIPLY); btn = createButton(\u0026#34;Change Color\u0026#34;); btn.position(30, 80); btn.mousePressed(changeColor); // dibujar el círculo strokeWeight(2); stroke(r, g, b); fill(r, g, b, 127); ellipse(240, 200, 200, 200); strokeWeight(2); stroke(r1, g1, b1); fill(r1, g1, b1, 127); ellipse(360, 200, 200, 200); } // cuando el usuario hace click function changeColor() { // revisar si el ratón está dentro del círculo // escoger nuevos colores aleatorios r = random(255); g = random(255); b = random(255); r1 = random(255); g1 = random(255); b1 = random(255); } {{\u0026lt; /p5-global-iframe \u0026gt;}} Conclusión # Es importante destacar la función blendMode() se usa para combinar dos píxeles de acuerdo con el modo de combinación dado. Los diferentes tipos de modos de fusión tienen diferentes métodos para mezclar los píxeles de origen con los presentes en la ventana de visualización, para producir el píxel resultante. Se descubrió que la multiplicación ambos colores da como resultado un color más oscuro.\n"},{"id":6,"href":"/RGB/docs/Ejercicios/Ejercicio2/","title":"Ejercicio2","section":"Ejercicios","content":" Ejercicio 2 # Ejercicio 2\nDevelop a terrain visualization application Mach band # Las bandas de Mach son una ilusión óptica que parte de una imagen con dos bandas, una iluminada y la otra oscura, separadas por una estrecha banda central coloreada con un gradiente de iluminado a oscuro. El ojo humano percibe dos estrechas bandas de diferente luminosidad, que no están presentes en la imagen verdadera, a cada lado del gradiente. Esta ilusión se denomina así debido a Ernst Mach.\n¿Qué es Perlin Noise? # es una función matemática que utiliza interpolación entre un gran número de gradientes precalculados de vectores que construyen un valor que varía seudo-aleatoriamente en el espacio o tiempo. Se parece al ruido blanco, y es frecuentemente utilizado en imágenes generadas por computadora para simular variabilidad en todo tipo de fenómenos, acercándose estas así a un aspecto más natural.\nCódigo # terrain visualization 1 var cols, rows; var scl = 20; var w = 1200; var h = 400; var zoff = 0; var inc = 0.1; var zinc = 0.02; var start = 0; var minVal = -50; var maxVal = 50; var startInc = 0; function setup() { createCanvas(800, 350, WEBGL); cols = w / scl; rows = h / scl; } function draw() { background(0); fill(0,255,255); stroke(0); rotateX(PI/3); translate(-w/2, -h/2); let yoff = -start; for (let y = 0; y \u0026lt; rows - 1; y++) { let xoff = 0; beginShape(TRIANGLE_STRIP); for (let x = 0; x \u0026lt; cols; x++) { vertex(x*scl, y*scl, map(noise(xoff,yoff,zoff), 0, 1, minVal, maxVal)); vertex(x*scl, (y+1)*scl, map(noise(xoff,yoff,zoff), 0, 1, minVal, maxVal)); xoff += inc; } yoff += inc; endShape(); } zoff += zinc; start += startInc; } terrain visualization 2 \u0026#34;use strict\u0026#34;; // ----- vars ----- // let canvas; let rows, columns, terrain; let scale = 15; let heightOffset = 100; let yStart = 0; let noiseOffset = 0.1; // ----- setup ----- // function setup() { // create and style canvas canvas = createCanvas(windowWidth, windowHeight, WEBGL); canvas.style(\u0026#39;display: block;\u0026#39;); // get number of rows and columns columns = Math.floor(width * 2 / scale); rows = Math.floor(height * 2 / scale); terrain = generateTerrain(rows, columns, heightOffset, noiseOffset, yStart); } // ----- resize ----- // function windowResized() { resizeCanvas(windowWidth, windowHeight); columns = Math.floor(width * 2 / scale); rows = Math.floor(height * 2 / scale); } // ----- draw ----- // function draw() { background(255); yStart -= noiseOffset * 3; terrain = generateTerrain(rows, columns, heightOffset, noiseOffset, yStart); drawMesh(terrain); } // ----- generate terrain ----- // function generateTerrain(rows, columns, heightOffset, noiseOffset, yStart) { // create 2d array let terrain = new Array(rows); for (let i = 0; i \u0026lt; terrain.length; i++) { terrain[i] = new Array(columns); } // generate perlin noise let yOffset = yStart; for (let y = 0; y \u0026lt; rows; y++) { let xOffset = 0; for (let x = 0; x \u0026lt; columns; x++) { terrain[y][x] = map(noise(xOffset, yOffset), 0, 1, -heightOffset, heightOffset); xOffset += noiseOffset; } yOffset += noiseOffset; } return terrain; } // ----- create grid ----- // function drawMesh(terrain) { // setup stroke(0); fill(\u0026#34;brown\u0026#34;); rotateX(PI / 3); translate(-width, -height * 1.2, 0); // draw triangle strips for (let y = 0; y \u0026lt; rows - 1; y++) { beginShape(TRIANGLE_STRIP); for (let x = 0; x \u0026lt; columns; x++) { vertex(x * scale, y * scale, terrain[y][x]); vertex(x * scale, (y + 1) * scale, terrain[y + 1][x]); } endShape(); } } Conclusión # Las funciones de ruido se han utilizado en una amplia gama de métodos de creación de contenidos procedimentales incluyendo la generación de terrenos. Perlin noise, diseñado originalmente para la generación de texturas por procedimientos de tipo natural, es quizás la implementación de ruido más conocida y más conocida y referenciada, y que todavía se utiliza ampliamente en la actualidad.\nBibliografía # Procedural Generation: Perlin Noise por Dave Mount Noise Functions, CMSC 425 "},{"id":7,"href":"/RGB/docs/Ejercicios/Ejercicio3/","title":"Ejercicio3","section":"Ejercicios","content":" Ejercicio 3 # Ejercicio 3\nResearch some dither visual apps. Dithering # Es una técnica usada en computación gráfica para crear la ilusión de profundidad de color en imágenes con una paleta de colores limitada. En una imagen tramada, los colores no disponibles en la paleta se aproximan por una difusión de píxeles de color dentro de la gama de colores disponibles. El ojo humano percibe la difusión como una mezcla de los colores dentro de ésta. El tramado es análoga a la técnica denominada semitonos utilizada en impresión. Las imágenes tramadas, en particular las que tienen relativamente pocos colores, a menudo se distinguen por un grado de granulosidad característico o por un aspecto moteado.\nLa reducción de la profundidad de color de una imagen a menudo puede tener importantes efectos secundarios visuales. Si la imagen original es una fotografía, es probable que tenga miles o incluso millones de distintos colores. El proceso de limitar los colores disponibles a una paleta de colores específica efectivamente quita una cierta cantidad de información de color.\nRandom dither # El Random dither puede considerarse como el proceso de convertir una imagen en escala de grises en una imagen en blanco y negro o monocromática. La razón de ser aleatoria es que el proceso funciona eligiendo al azar los valores de los píxeles de la imagen. Si el valor del píxel es mayor que el valor aleatorio del píxel, entonces se convierte en blanco, y si no, el lugar de la imagen se convierte en negro.\nOrdered Dithering # Este tipo de proceso de dithering también se utiliza para la conversión de imágenes en color en monocromo. Pero este proceso funciona eligiendo un patrón diferente de la imagen dependiendo del color que se presente en el área de trabajo de la imagen. La siguiente imagen es la representación de este tipo de dithering.\nAplicaciones # La visualización de gráficos con precisión es una de las aplicaciones más comunes del dithering. Por ejemplo, podemos mostrar una imagen que contenga millones de colores en un hardware capaz de mostrar 256 colores a la vez utilizando el dithering.\nEl GIF puede considerarse como un vídeo de pequeño tamaño en el que las imágenes se encadenan para mostrar la variación en el cuadro. El Dithering resulta muy útil en la creación de gifs porque ayuda a reducir el tamaño de la imagen, lo que proporciona una velocidad adecuada a la variedad de imágenes en el marco y también es útil para gestionar la calidad de la imagen.\nCódigo # Implementation of the Floyd-Steinberg Dithering algorithm // Modificado de https://editor.p5js.org/codingtrain/sketches let img; var factor=1; //If it is equal to 1 and there is a gray filter there will be only two colors. var wd; var d; function preload() { img = loadImage(\u0026#39;imagen\u0026#39;); } function setup() { let c=createCanvas(img.width,img.height); background(255, 255, 255); pixelDensity(1); image(img,0,0); filter(GRAY); wd=img.width; loadPixels(); d = pixelDensity(); for (let y = 0; y \u0026lt; height-1; y++) { for (let x = 1; x \u0026lt; width-1; x++){ var index = getIndex(x,y); var r= pixels[index]; var g= pixels[index + 1]; var b= pixels[index + 2]; var a= pixels[index + 3]; var newR=find_closest_palette_color(r); var newG=find_closest_palette_color(g); var newB=find_closest_palette_color(b); var newA= find_closest_palette_color(a); pixels[index] = newR; pixels[index + 1] = newG; pixels[index + 2] = newB; pixels[index + 3] = newA; //Calculating quantization error of a pixel. var quant_error_R=r-newR; var quant_error_G=g-newG; var quant_error_B=b-newB; var quant_error_A=a-newA; // index = getIndex(x+1,y); r= pixels[index]+(quant_error_R*7/16.0); g= pixels[index + 1]+(quant_error_G*7/16.0); b= pixels[index + 2]+(quant_error_B*7/16.0); a= pixels[index + 3]+(quant_error_A*7/16.0); pixels[index] = r; pixels[index + 1] = g; pixels[index + 2] = b; pixels[index + 3] = a; index = getIndex(x-1,y+1); r= pixels[index]+(quant_error_R*3/16.0); g= pixels[index + 1]+(quant_error_G*3/16.0); b= pixels[index + 2]+(quant_error_B*3/16.0); a= pixels[index + 3]+(quant_error_A*3/16.0); pixels[index] = r; pixels[index + 1] = g; pixels[index + 2] = b; pixels[index + 3] = a; index = getIndex(x,y+1); r= pixels[index]+(quant_error_R*5/16.0); g= pixels[index + 1]+(quant_error_G*5/16.0); b= pixels[index + 2]+(quant_error_B*5/16.0); a= pixels[index + 3]+(quant_error_A*5/16.0); pixels[index] = r; pixels[index + 1] = g; pixels[index + 2] = b; pixels[index + 3] = a; index = getIndex(x+1,y+1); r= pixels[index]+(quant_error_R*1/16.0); g= pixels[index + 1]+(quant_error_G*1/16.0); b= pixels[index + 2]+(quant_error_B*1/16.0); a= pixels[index + 3]+(quant_error_A*1/16.0); pixels[index] = r; pixels[index + 1] = g; pixels[index + 2] = b; pixels[index + 3] = a; } } updatePixels(); } //Quantization operation. function find_closest_palette_color(old){ return round(factor*old/255)*(255/factor) } //Returns the initial index of a pixel located at (x,y). function getIndex(x,y){ return (x+(y*wd))*4; } Imagen original # Dithering # Conclusión # El uso de dithering tiene la ventaja de que, tras la primera reducción, la imagen puede mostrarse en su forma de baja calidad. para comprimir la imagen, hasta cierto punto medida es beneficioso en términos de almacenamiento y transmisión, debido a la baja asignación de recursos necesaria para la imagen. Por último, realizar una compresión sin pérdidas utilizando el Ordered Dithering puede ser ventajoso en términos de conversión de imágenes en color en monocromo.\nBibliografía # What is Dithering in Image Processing and How it Maintains Image Quality? por Yugesh Verma Dithering, Por piavivo Image Quantization, Halftoning, and Dithering, Por Thomas Funkhouser, Princeton University "},{"id":8,"href":"/RGB/docs/shortcodes/","title":"Shortcodes","section":"Docs","content":" shortcodes # shortcodes\nshortcodes # Buttons Buttons # Buttons are styled links that can lead to local page or external link. Example # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute Columns Columns # Columns help organize shorter pieces of content horizontally for readability. {{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Details Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode. Example # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip; Title Markdown content # Lorem markdownum insigne\u0026hellip; Hints Hints # Hint shortcode can be used as hint/alerts/notification block. There are 3 colors to choose: info, warning and danger. {{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content Katex KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX Example # {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here. Mermaid Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text. Override Mermaid Initialization Config To override the initialization config for Mermaid, create a mermaid.json file in your assets folder! Example # {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. P5 p5 # p5 helps add p5 sketches into your book. There are two types of p5 shortcodes according to the html element used to embed them. Types # Div p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div. p5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Tabs Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform. {{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content. Lorem markdownum insigne. Olympo signis Delphis! "},{"id":9,"href":"/RGB/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":10,"href":"/RGB/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. Mid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Right Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":11,"href":"/RGB/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip; Title Markdown content # Lorem markdownum insigne\u0026hellip; "},{"id":12,"href":"/RGB/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":13,"href":"/RGB/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.\n"},{"id":14,"href":"/RGB/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":15,"href":"/RGB/docs/shortcodes/p5/","title":"P5","section":"Shortcodes","content":" p5 # p5 helps add p5 sketches into your book. There are two types of p5 shortcodes according to the html element used to embed them.\nTypes # Div p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div. p5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified. Scintillating grid # Look at this and also this among many more references there are. p5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/RGB/sketches/scintillating. Iframe p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe. p5-iframe # {{\u0026lt; p5-iframe ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified. Color relativity # Look at this brief explanation about what color relativity is. p5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/RGB/sketches/colors. "},{"id":16,"href":"/RGB/docs/shortcodes/p5/div/","title":"Div","section":"P5","content":"p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.\np5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nScintillating grid # Look at this and also this among many more references there are.\np5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/RGB/sketches/scintillating.js\u0026#34; \u0026gt;}} p5-instance-div # {{\u0026lt; p5-instance-div id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.2\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-instance-div \u0026gt;}} Note that the inline sketch should be coded in p5 instance mode syntax. All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nLilac chaser # Look at this introductory reference.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;lilac-chaser\u0026#34; \u0026gt;}} // Adapted from [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/lilacChaser.js) let jump = 0; let count = 0; p5.setup = function() { p5.createCanvas(400, 400); p5.frameRate(7); }; function drawBlurCircles(x, y, r) { p5.push(); p5.noStroke(); var opc = 0.4; var step = 3.0/r; for (var i = r; i \u0026gt; 0; i-=1.5) { if (opc \u0026lt; 5) { opc += step; p5.fill(255, 20, 180, opc); } p5.ellipse(x, y, i, i); } p5.pop(); }; p5.draw = function() { p5.background(200); var numCircles = 12; var stepAngle = 360.0/numCircles; p5.push(); p5.translate(p5.width/2.0, p5.height/2.0); for (var i = 0; i \u0026lt; 360; i = i + stepAngle) { if (i != jump) { p5.push(); p5.rotate(p5.radians(i)); drawBlurCircles(120, 0, 60); p5.pop(); } } if( !p5.mouseIsPressed ) { jump = (jump + stepAngle)%360; } p5.push(); p5.strokeWeight(1.5); p5.line(-7, 0, 7, 0); p5.line(0, -7, 0, 7); p5.pop(); p5.pop(); } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable. Video on canvas # Adapted from here. Don\u0026rsquo;t forget to checkout also the video on dom example.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;video\u0026#34; \u0026gt;}} let fingers; p5.setup = function() { p5.createCanvas(710, 400); // specify multiple formats for different browsers fingers = p5.createVideo([\u0026#39;/showcase/sketches/fingers.mov\u0026#39;, \u0026#39;/showcase/sketches/fingers.webm\u0026#39;]); fingers.hide(); // by default video shows up in separate dom // element. hide it and draw it to the canvas instead }; p5.draw = function() { p5.background(150); p5.image(fingers, 10, 10); // draw the video frame to canvas p5.filter(p5.GRAY); p5.image(fingers, 150, 150); // draw a second copy to canvas }; p5.mousePressed = function() { fingers.loop(); // set the video to loop and start playing } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable. "},{"id":17,"href":"/RGB/docs/shortcodes/p5/iframe/","title":"Iframe","section":"P5","content":"p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.\np5-iframe # {{\u0026lt; p5-iframe ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nColor relativity # Look at this brief explanation about what color relativity is.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/RGB/sketches/colors.js\u0026#34; width=\u0026#34;725\u0026#34; height=\u0026#34;425 \u0026gt;}} Third party libraries # Example adapted from p5.EasyCam.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/RGB/sketches/quick_easycam.js\u0026#34; lib1=\u0026#34;https://cdn.jsdelivr.net/gh/freshfork/p5.EasyCam@1.2.1/p5.easycam.min.js\u0026#34; width=\u0026#34;525\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}} Sound # Example took from the p5 examples.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/RGB/sketches/sound.js\u0026#34; width=\u0026#34;225\u0026#34; height=\u0026#34;225\u0026#34; \u0026gt;}} p5-global-iframe # {{\u0026lt; p5-global-iframe id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.2\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-global-iframe \u0026gt;}} Note that the inline sketch should be coded in p5 global mode syntax. All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nBreathing square # Look at this reference for an explanation and further parameterization of the illusion.\np5-global-iframe markdown {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;625\u0026#34; height=\u0026#34;625\u0026#34; \u0026gt;}} // Coded as `global mode` of [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/rotateSquare.js) let angle = 0; let speed = 0.06; function setup() { createCanvas(600, 600); } function draw() { background(255, 255, 255); rotateSquare(); if (!mouseIsPressed) { strokeWeight(0); stroke(0); fill(255, 140, 0); rect(0, 0, 281, 281); rect(318, 0, 281, 281); rect(0, 318, 281, 281); rect(318, 318, 281, 281); } } function rotateSquare() { push(); angle += speed; strokeWeight(0); stroke(0); fill(0, 0, 255); translate(width / 2, height / 2); rotate(angle); rect(-187.5, -187.5, 375, 375); pop(); } {{\u0026lt; /p5-global-iframe \u0026gt;}} p5-widget # The p5-widget shortcode embed p5.js code within an p5-widget.\n{{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.2\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-widget \u0026gt;}} All parameters are optional. Default ver is 1.4.2. For example:\nWidget example # p5-widget markdown {{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.2\u0026#34; \u0026gt;}} function setup() { createCanvas(300, 300); } function draw() { background(255, 0, 255); } {{\u0026lt; /p5-widget \u0026gt;}} "},{"id":18,"href":"/RGB/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":19,"href":"/RGB/docs/Talleres/","title":"Talleres","section":"Docs","content":" Talleres # Talleres del curso\nTalleres # Gray Scale Implemente otras herramientas de brillo de color , como el valor V de HSV , la luminosidad L de HSL o el promedio de componentes . # Conversión a escala de grises # El primer método, y más intuitivo, es convertir la imagen a escala de grises sacando el promedio aritmético de los valores RGB. El segundo método es calculando la variable luma. Para eso se utiliza la siguiente ecuación: Main Spaces Taller 2 : 3D Webgl Application # Planteamiento del problema # Implementación de una aplicación webgl 3d. a través de la utilización de p5.treegl o otra librería. Main spaces # Sistema Tierra-Luna : # La luna es para el planeta tierra eje fundamental de estaciones y mareas, los científicos creen que un objeto del tamaño de Marte colisionó con la Tierra hace 4.500 millones de años. La fuerza de esta colisión fue tan impresionante que desprendió materiales de la Tierra y del objeto con el que colisionó y los envió hacia el espacio. Photomosaic Photomosaic # Ejercicio 1 Implement a mosaic (or/and ascii art) visual application. Background # Fotomosaico # En el campo de las imágenes y la fotografía, un fotomosaico es una imagen usualmente una fotografía que ha sido dividida en secciones rectangulares (usualmente del mismo tamaño), tal como es compuesto un mosaico tradicional, con la característica de que cada elemento del mosaico es reemplazado por otra fotografía con colores promedios apropiados al elemento de la imagen original. Procedural Texturing Procedural texturing # En gráficos por computadora , una textura de procedimiento es una textura creada utilizando una descripción matemática (es decir, un algoritmo ) en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo costo de almacenamiento, la resolución ilimitada de texturas y el fácil mapeo de texturas . [2] Este tipo de texturas se utilizan a menudo para modelar superficies o representaciones volumétricas de elementos naturales como madera , mármol , granito , metal , piedra y otros. Visual Ilusions Taller # 1 # Visual illusions workshop # Estudiar, implementar y discutir posibles aplicaciones de algunos fenómenos visuales conocidos e ilusiones ópticas. Planteamiento del Problema # Identificar, implementar y discutir posibles aplicaciones de algunas ilusiones ópticas conocidas en el diseño y desarrollo de gráficos por computadora. Background # Una ilusión visual es una imagen que engaña al sistema visual, desde el ojo al cerebro, y lo lleva a percibir la realidad de forma distorsionada. Visual Masking Taller 2 : Visual Masking # Planteamiento del problema # Identificar, implementar y discutir posibles aplicaciones de algunas ilusiones ópticas conocidas en el diseño y desarrollo de gráficos por computadora. Máscaras de convolución # Explicación visual : # En matemáticas (en particular, análisis funcional), la convolución es una operación matemática sobre dos funciones (f y g) que produce una tercera función (f * g) que expresa cómo la forma de una es modificada por la otra. "},{"id":20,"href":"/RGB/docs/Talleres/Gray_Scale/","title":"Gray Scale","section":"Talleres","content":" Implemente otras herramientas de brillo de color , como el valor V de HSV , la luminosidad L de HSL o el promedio de componentes . # Conversión a escala de grises # El primer método, y más intuitivo, es convertir la imagen a escala de grises sacando el promedio aritmético de los valores RGB.\nEl segundo método es calculando la variable luma. Para eso se utiliza la siguiente ecuación:\nConvertir imagen a gris usando Average SOFTWARE # CODE let img; function preload() { img = loadImage(\u0026#39;https://i.imgur.com/SE4gXmS.jpg\u0026#39;); } function setup() { createCanvas(720, 560); noLoop(); } function draw() { img.loadPixels(); for (let y=0; y\u0026lt;img.height; y++) { for (let x=0; x\u0026lt;img.width; x++) { let px = img.get(x, y); // get pixel value let r = px[0]; let g = px[1]; let b = px[2]; let avg = (r+g+b)/3; img.set(x, y, color(avg)); // set pixel to this value } } img.updatePixels(); image(img, 0,0, 720,560); } Convertir usando HARDWARE # Convertir imagen a gris usando Luminance SOFTWARE # Una alternativa perceptualmente más relevante es usar luma , Y′ , como una dimensión de luminosidad. Luma es el promedio ponderado de R , G y B con corrección de gamma , en función de su contribución a la luminosidad percibida, utilizada durante mucho tiempo como la dimensión monocromática en la transmisión de televisión en color\nCODE let img; function preload() { img = loadImage(\u0026#39;https://i.imgur.com/SE4gXmS.jpg\u0026#39;); } function setup() { createCanvas(720, 560); noLoop(); } function draw() { img.loadPixels(); for (let y=0; y\u0026lt;img.height; y++) { for (let x=0; x\u0026lt;img.width; x++) { let px = img.get(x, y); // get pixel value let r = px[0]; let g = px[1]; let b = px[2]; let luminence = r * 0.2126 + g * 0.7152 + b * 0.0722 img.set(x, y, color(luminence)); // set pixel to this value } } img.updatePixels(); image(img, 0,0, 720,560); } Convertir usando HARDWARE # conclusiones # Convertir la imagen a escala de grises usando el promedio de los valores RGB es una solución rápida al problema y análisis de escala de grises de la imagen, por otro lado se puede observar una perdida en la calidad de la imagen En este caso al usar Luma se nota una mejora respecto a la calidad de la imagen en comparacion con la formula de promedio como la que se uso en el otro metodo Bibliografia # (S/f). Codepen.io. Recuperado el 14 de noviembre de 2022, de https://codepen.io/duketeam/pen/rMxNdB Conversión a escala de grises. (s/f). Github.Io. Recuperado el 14 de noviembre de 2022, de https://nigogumolvilada.github.io/grayscale Wikipedia contributors. (2022, octubre 13). HSL and HSV. Wikipedia, The Free Encyclopedia. https://en.wikipedia.org/w/index.php?title=HSL_and_HSV\u0026oldid=1115874918 Texturing. (s/f). Github.io. Recuperado el 22 de noviembre de 2022, de https://visualcomputing.github.io/docs/shaders/texturing/ Conclusiones: # Permiten trabajar diferentes patrones, los cuales manejan un .Frag Además de programas especializados, otros, como Blender , CorelDRAW ,contienen subsistemas de texturas procedimentales que se pueden utilizar para generar texturas. De acuerdo al libro de los shaders, tenemos una buena cantidad de patrones de mosaicos, los cuales podemos crear o implementar de acuerdo a material proveniente de otros trabajos, dando a entender que es una comunidad la que trabaja este estilo de gráficos. Bibliografía: # Procedural Texturing. (s/f). Github.io. Recuperado el 25 de noviembre de 2022, de https://visualcomputing.github.io/docs/shaders/procedural_texturing/ The book of shaders. (s/f). The Book of Shaders. Recuperado el 25 de noviembre de 2022, de https://thebookofshaders.com/09/ Wikipedia contributors. (s/f). Procedural texture. Wikipedia, The Free Encyclopedia. https://en-m-wikipedia-org.translate.goog/wiki/Procedural_texture?_x_tr_sl=auto\u0026_x_ tr_tl=es\u0026amp;_x_tr_hl=es-419 Wikipedia contributors. (s/f-a). Framebuffer object. Wikipedia, The Free Encyclopedia. https://en-m-wikipedia-org.translate.goog/wiki/Framebuffer_object?_x_tr_sl=auto\u0026_x _tr_tl=es\u0026amp;_x_tr_hl=es-419 home. (s/f). P5js.org. Recuperado el 25 de noviembre de 2022, de https://p5js.org/es/ "},{"id":21,"href":"/RGB/docs/Talleres/Main-Spaces/","title":"Main Spaces","section":"Talleres","content":" Taller 2 : 3D Webgl Application # Planteamiento del problema # Implementación de una aplicación webgl 3d. a través de la utilización de p5.treegl o otra librería.\nMain spaces # Sistema Tierra-Luna : # La luna es para el planeta tierra eje fundamental de estaciones y mareas, los científicos creen que un objeto del tamaño de Marte colisionó con la Tierra hace 4.500 millones de años. La fuerza de esta colisión fue tan impresionante que desprendió materiales de la Tierra y del objeto con el que colisionó y los envió hacia el espacio. Parte de estos escombros se juntó para formar la Luna.\nLa Luna no solo se formó principalmente con materiales de la Tierra, sino que probablemente una gran cantidad de escombros de la Tierra aterrizaron en la Luna en el período posterior a su formación. Podría haber más indicios sobre la composición de la Tierra primordial ocultos entre las capas de polvo lunar.\nSin la gravedad de la Luna, la Tierra se tambalearía más violentamente sobre su eje, alterando así drásticamente el clima. Además de mantener la estabilidad del clima, la Luna marca el ritmo de la Tierra (las subidas y las bajadas de las mareas), lo que afecta la variedad de maneras en que usamos el océano para alimentarnos, viajar y recrearnos.\nEl modelado 3D consiste en utilizar software para crear una representación matemática de un objeto o forma tridimensional. El objeto creado se denomina modelo 3D y se utiliza en distintas industrias. Se puede visualizar como una imagen bidimensional mediante un proceso llamado renderizado 3D o utilizar en una simulación por computadora de fenómenos físicos.\nHerramientas a utilizar: # Uno de los dos modos de renderizado en p5.js: P2D (renderizador predeterminado) y WEBGL Habilita el renderizado 3D introduciendo la tercera dimensión: Z. Ambos modos de representación utilizan el elemento de lienzo html; sin embargo, al habilitar el \u0026ldquo;contexto\u0026rdquo; WEBGL en el lienzo, ahora podemos dibujar tanto en 2D como en 3D.\nWEBGL (Web Graphics Library) # Es una especificación estándar que define una API implementada en JavaScript para la renderización de gráficos en 3D dentro de cualquier navegador web. No precisa del uso de plug-ins adicionales en cualquier plataforma que soporte OpenGL 2.0 u OpenGL ES 2.0. WebGL está integrada completamente en todos los estándares web del navegador, permitiendo la aceleración hardware (física) de la GPU y el procesamiento de imágenes y efectos como parte del lienzo o \u0026ldquo;canvas\u0026rdquo; de la página web. Los elementos de WebGL se pueden combinar con otros elementos HTML y estar compuestos con otras partes de la página o del fondo (background) de la página.\nsintaxis WEBGL:\nSistema de coordenadas 3D # La coordenada cartesiana 0,0 (x,y) se encuentra en la esquina superior izquierda del lienzo de dibujo. En el modo WEBGL introducimos una tercera dimensión: Z. La dimensión z es el eje que apunta hacia usted desde la pantalla.\nCódigo y Resultado: # Inicialización del script\n# Función Preload # Nos permite cargar nuestras imágenes a utilizar, como se observa en las líneas de código son especificas que imagenes utiliza nuestro proyecto.\nCreate Canvas # la cual en estas líneas está representada la luz con el respectivo eje de rotación permitiendo una visualización de sombra que se ve reflejada en el planeta tierra.\nRotate # Esta función nos permite utilizar la rotación y dar una perspectiva de movimiento donde la tierra gira en su propio eje y la luna alrededor de la tierra, aun así la luna gira gira en su propio eje, no obstante cabe aclarar que utilizamos push y pop como funciones.\nResultado # Se puede observar una imagen, la cual representa la implementación en 3D de la tierra y la luna con un fondo de estrellas, la cual simula la respectiva rotación.\nCODE Code Earth and Moon \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tierra y Luna\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; function preload() { textura_tierra = loadImage(\u0026#39;https://i.ibb.co/PD4LyP5/planeta.jpg\u0026#39;); textura_luna = loadImage(\u0026#39;https://i.ibb.co/WPvVybx/luna.jpg\u0026#39;); textura_fondo_estrellas = loadImage(\u0026#34;https://i.ibb.co/NNTFKmL/nocheHD.jpg\u0026#34;) } function setup() { createCanvas(800, 450, WEBGL); } function draw() { background(\u0026#34;black\u0026#34;) noStroke() //No dibujar la malla de las esferas texture(textura_fondo_estrellas) sphere(800) for (let i = 0; i \u0026lt; 3; i++) { directionalLight( 255, 255, 255 - i * 25,//Color -1, 1, -1 //Dirección ); } orbitControl() //Controlar con el mouse la cámara rotateZ(-0.3) //Inclinación de la tierra push() rotateY(frameCount * 0.01); //rotación de la tierra sobre su propio eje texture(textura_tierra); sphere(100); pop() push() rotateY(-frameCount * 0.05 / 10);//Traslación de la luna alrededor de la tierra translate(0, 0, 170)//Distancia del centro de la luna al centro de la tierra rotateY(-frameCount * 0.05);//Rotación de la luna sobre su propio eje texture(textura_luna); sphere(25); pop() } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Proyecto Laberinto # Laberinto const TILE_SIZE = 64; const MAP_NUM_ROWS = 10; const MAP_NUM_COLS = 16; const WINDOW_WIDTH = MAP_NUM_COLS * TILE_SIZE; const WINDOW_HEIGHT = MAP_NUM_ROWS * TILE_SIZE; const MINIMAP_SCALE_FACTOR = 0.2; // const VISION_ANGLE = 2*Math.PI ; const VISION_ANGLE = Math.PI / 2; const RAY_WIDTH = 2; // can be increased for optimization const NUM_RAYS = WINDOW_WIDTH / RAY_WIDTH; class Map { constructor() { this.grid = [ [1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1], [2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1] ]; this.width = WINDOW_WIDTH; this.height = WINDOW_HEIGHT; } hasWallAt(x, y) { if (x \u0026lt;= 0 || y \u0026lt;= 0 || x \u0026gt; WINDOW_WIDTH || y \u0026gt; WINDOW_HEIGHT) return true; var i = Math.floor(x / TILE_SIZE) var j = Math.floor(y / TILE_SIZE) return this.grid[j][i]; } render() { for (var i = 0; i \u0026lt; MAP_NUM_ROWS; i++) { for (var j = 0; j \u0026lt; MAP_NUM_COLS; j++) { var tileX = j * TILE_SIZE; var tileY = i * TILE_SIZE; var tileColor = this.grid[i][j] == 0 ? \u0026#34;#fff\u0026#34; : \u0026#34;#000\u0026#34;; // colores minimapa stroke(\u0026#34;#222\u0026#34;); fill(tileColor); rect( MINIMAP_SCALE_FACTOR * tileX, MINIMAP_SCALE_FACTOR * tileY, MINIMAP_SCALE_FACTOR * TILE_SIZE, MINIMAP_SCALE_FACTOR * TILE_SIZE ); } } } } class Player { constructor() { this.x = 100; this.y = 570; this.radius = 4; this.turnDirection = 0; //-1 for left , 1 for right this.walkDirection = 0; //-1 for back , 1 for front this.strafeDirection = 0; //-1 for back , 1 for front this.rotationAngle = -Math.PI / 2; this.moveSpeed = 2.0; this.rotationSpeed = 3 * (Math.PI / 180) } update() { this.rotationAngle += this.turnDirection * this.rotationSpeed; // this.rotationAngle = normalizeAngle(this.rotationAngle) var moveStep = this.walkDirection * this.moveSpeed; var newPlayerX = this.x + Math.cos(this.rotationAngle) * moveStep; var newPlayerY = this.y + Math.sin(this.rotationAngle) * moveStep; if (grid.hasWallAt(newPlayerX, newPlayerY) == 0) { this.x = newPlayerX; this.y = newPlayerY; // console.log(this); } if (this.strafeDirection) { var newX = this.x + this.strafeDirection * this.moveSpeed * Math.sin(this.rotationAngle); var newY = this.y + this.strafeDirection * this.moveSpeed * Math.cos(this.rotationAngle); if (grid.hasWallAt(newX, newY) !== 0) { this.x = newX; this.y = newY; } } } render() { noStroke(); fill(\u0026#34;blue\u0026#34;); circle( MINIMAP_SCALE_FACTOR * this.x, MINIMAP_SCALE_FACTOR * this.y, MINIMAP_SCALE_FACTOR * this.radius ); stroke(\u0026#34;blue\u0026#34;); line( MINIMAP_SCALE_FACTOR * this.x, MINIMAP_SCALE_FACTOR * this.y, MINIMAP_SCALE_FACTOR * (this.x + Math.cos(this.rotationAngle) * 30), MINIMAP_SCALE_FACTOR * (this.y + Math.sin(this.rotationAngle) * 30) ); } } class Ray { constructor(rayAngle) { this.rayAngle = normalizeAngle(rayAngle); this.wallHitX = 0; this.wallHitY = 0; this.distance = 0; this.wasHitVertical = false; this.wallColor = 0; this.isRayFacingDown = this.rayAngle \u0026gt; 0 \u0026amp;\u0026amp; this.rayAngle \u0026lt; Math.PI; this.isRayFacingUp = !this.isRayFacingDown; this.isRayFacingRight = this.rayAngle \u0026lt; 0.5 * Math.PI || this.rayAngle \u0026gt; 1.5 * Math.PI; this.isRayFacingLeft = !this.isRayFacingRight; } cast() { var xintercept, yintercept; var xstep, ystep; /////////////////////////////////////////// // HORIZONTAL RAY-GRID INTERSECTION CODE /////////////////////////////////////////// var foundHorzWallHit = false; var horzWallHitX = 0; var horzWallHitY = 0; var horWallColor = 0 // Find the y-coordinate of the closest horizontal grid intersenction yintercept = Math.floor(player.y / TILE_SIZE) * TILE_SIZE; yintercept += this.isRayFacingDown ? TILE_SIZE : 0; // Find the x-coordinate of the closest horizontal grid intersection xintercept = player.x + (yintercept - player.y) / Math.tan(this.rayAngle); // Calculate the increment xstep and ystep ystep = TILE_SIZE; ystep *= this.isRayFacingUp ? -1 : 1; xstep = TILE_SIZE / Math.tan(this.rayAngle); xstep *= (this.isRayFacingLeft \u0026amp;\u0026amp; xstep \u0026gt; 0) ? -1 : 1; xstep *= (this.isRayFacingRight \u0026amp;\u0026amp; xstep \u0026lt; 0) ? -1 : 1; var nextHorzTouchX = xintercept; var nextHorzTouchY = yintercept; // Increment xstep and ystep until we find a wall while (nextHorzTouchX \u0026gt;= 0 \u0026amp;\u0026amp; nextHorzTouchX \u0026lt;= WINDOW_WIDTH \u0026amp;\u0026amp; nextHorzTouchY \u0026gt;= 0 \u0026amp;\u0026amp; nextHorzTouchY \u0026lt;= WINDOW_HEIGHT) { if (grid.hasWallAt(nextHorzTouchX, nextHorzTouchY - (this.isRayFacingUp ? 1 : 0)) !== 0) { foundHorzWallHit = true; horzWallHitX = nextHorzTouchX; horzWallHitY = nextHorzTouchY; horWallColor = grid.hasWallAt(nextHorzTouchX, nextHorzTouchY - (this.isRayFacingUp ? 1 : 0)) break; } else { nextHorzTouchX += xstep; nextHorzTouchY += ystep; } } /////////////////////////////////////////// // VERTICAL RAY-GRID INTERSECTION CODE /////////////////////////////////////////// var foundVertWallHit = false; var vertWallHitX = 0; var vertWallHitY = 0; var verWallColor = 0 // Find the x-coordinate of the closest vertical grid intersenction xintercept = Math.floor(player.x / TILE_SIZE) * TILE_SIZE; xintercept += this.isRayFacingRight ? TILE_SIZE : 0; // Find the y-coordinate of the closest vertical grid intersection yintercept = player.y + (xintercept - player.x) * Math.tan(this.rayAngle); // Calculate the increment xstep and ystep xstep = TILE_SIZE; xstep *= this.isRayFacingLeft ? -1 : 1; ystep = TILE_SIZE * Math.tan(this.rayAngle); ystep *= (this.isRayFacingUp \u0026amp;\u0026amp; ystep \u0026gt; 0) ? -1 : 1; ystep *= (this.isRayFacingDown \u0026amp;\u0026amp; ystep \u0026lt; 0) ? -1 : 1; var nextVertTouchX = xintercept; var nextVertTouchY = yintercept; // Increment xstep and ystep until we find a wall while (nextVertTouchX \u0026gt;= 0 \u0026amp;\u0026amp; nextVertTouchX \u0026lt;= WINDOW_WIDTH \u0026amp;\u0026amp; nextVertTouchY \u0026gt;= 0 \u0026amp;\u0026amp; nextVertTouchY \u0026lt;= WINDOW_HEIGHT) { if (grid.hasWallAt(nextVertTouchX - (this.isRayFacingLeft ? 1 : 0), nextVertTouchY) !== 0) { foundVertWallHit = true; vertWallHitX = nextVertTouchX; vertWallHitY = nextVertTouchY; verWallColor = grid.hasWallAt(nextVertTouchX - (this.isRayFacingLeft ? 1 : 0), nextVertTouchY) break; } else { nextVertTouchX += xstep; nextVertTouchY += ystep; } } // Calculate both horizontal and vertical distances and choose the smallest value var horzHitDistance = (foundHorzWallHit) ? calculateDistance(player.x, player.y, horzWallHitX, horzWallHitY) : Number.MAX_VALUE; var vertHitDistance = (foundVertWallHit) ? calculateDistance(player.x, player.y, vertWallHitX, vertWallHitY) : Number.MAX_VALUE; // only store the smallest of the distances if (vertHitDistance \u0026lt; horzHitDistance) { this.wallHitX = vertWallHitX; this.wallHitY = vertWallHitY; this.distance = vertHitDistance; this.wallColor = verWallColor this.wasHitVertical = true; } else { this.wallHitX = horzWallHitX; this.wallHitY = horzWallHitY; this.distance = horzHitDistance; this.wallColor = horWallColor this.wasHitVertical = false; } } render() { stroke(\u0026#34;rgba(255, 0, 0, 1.0)\u0026#34;);//visor line( MINIMAP_SCALE_FACTOR * player.x, MINIMAP_SCALE_FACTOR * player.y, MINIMAP_SCALE_FACTOR * this.wallHitX, MINIMAP_SCALE_FACTOR * this.wallHitY ); } } var player = new Player() var grid = new Map() var rays = [] function normalizeAngle(angle) { angle = angle % (2 * Math.PI); if (angle \u0026lt; 0) { angle = (2 * Math.PI) + angle; } return angle; } function calculateDistance(x1, y1, x2, y2) { return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)); } function castAllRays() { var rayAngle = player.rotationAngle - (VISION_ANGLE / 2); rays = []; for (var i = 0; i \u0026lt; NUM_RAYS; i++) { var ray = new Ray(rayAngle); ray.cast() rays.push(ray); rayAngle += VISION_ANGLE / NUM_RAYS; } } function render3DProjectedWalls() { // loop every ray in the array of rays for (var i = 0; i \u0026lt; NUM_RAYS; i++) { var ray = rays[i]; // get the perpendicular distance to the wall to fix fishbowl distortion var correctWallDistance = ray.distance * Math.cos(ray.rayAngle - player.rotationAngle); // calculate the distance to the projection plane var distanceProjectionPlane = (WINDOW_WIDTH / 2) / Math.tan(VISION_ANGLE / 2); // projected wall height var rayHeight = (TILE_SIZE / correctWallDistance) * distanceProjectionPlane; // compute the transparency based on the wall distance var alpha = 1.0; //170 / correctWallDistance; var alpha = 180 / correctWallDistance var alpha = ray.wasHitVertical ? 1 : 0.8; // render a rectangle with the calculated wall height // fill(\u0026#34;rgba(\u0026#34; + color + \u0026#34;,\u0026#34; + color/3 + \u0026#34;,\u0026#34; + color/.3 + \u0026#34;,\u0026#34; + alpha + \u0026#34;)\u0026#34;); var colorR = ray.wallColor == 1 ? 108 : ray.wallColor == 2 ? 39 : ray.wallColor == 3 ? 60 : 255; var colorG = ray.wallColor == 1 ? 145 : ray.wallColor == 2 ? 145 : ray.wallColor == 3 ? 160 : 255; var colorB = ray.wallColor == 1 ? 70 : ray.wallColor == 2 ? 190 : ray.wallColor == 3 ? 100 : 255; noStroke(); fill(\u0026#39;#C2F9E9\u0026#39;)//cielo rect(i * RAY_WIDTH, 0, RAY_WIDTH, (WINDOW_HEIGHT / 2) - (rayHeight / 2)) fill(\u0026#34;rgba(\u0026#34; + colorR + \u0026#34;, \u0026#34; + colorG + \u0026#34;, \u0026#34; + colorB + \u0026#34;, \u0026#34; + alpha + \u0026#34;)\u0026#34;); //paredes rect( i * RAY_WIDTH, (WINDOW_HEIGHT / 2) - (rayHeight / 2), RAY_WIDTH, rayHeight ); fill(\u0026#39;#FFE689\u0026#39;)//s rect(i * RAY_WIDTH, (WINDOW_HEIGHT - rayHeight) / 2 + rayHeight, RAY_WIDTH, WINDOW_HEIGHT /2) } } function setup(WEBGL) { // initialize all objects createCanvas(WINDOW_WIDTH, WINDOW_HEIGHT); } function update() { // update game objects player.update() castAllRays() } function draw() { // render objects clear(\u0026#34;#111\u0026#34;); update(); render3DProjectedWalls(); // fill(\u0026#39;#eee\u0026#39;) grid.render() for (const ray of rays) { ray.render() } player.render() } // actions function keyPressed() { // console.log(keyCode); switch (keyCode) { case UP_ARROW: player.walkDirection = +1 break; case DOWN_ARROW: player.walkDirection = -1 break; case RIGHT_ARROW: player.turnDirection = +1 break; case LEFT_ARROW: player.turnDirection = -1 break; case 33: player.strafeDirection = +1 break; case 34: player.strafeDirection = -1 break; default: break; } } function keyReleased() { switch (keyCode) { case UP_ARROW: player.walkDirection = 0; break; case DOWN_ARROW: player.walkDirection = 0; break; case RIGHT_ARROW: player.turnDirection = 0; break; case LEFT_ARROW: player.turnDirection = 0; break; case 33: player.strafeDirection = 0; break; case 34: player.strafeDirection = 0; break; default: break; } } // setup() Enlace de Laberinto # Laberinto Aplicaciones # Esta herramienta desarrollada permite aplicaciones en el ambito escolar y científico dando una imagen más clara de cómo es el comportamiento de nuestro satelite.\nDe manera general el modelado 3D tiene funciones que van más allá del diseño de una figura de acción para una película de animación. Con esta técnica también se ha beneficiado el campo de la medicina, representando modelos tridimensionales de la anatomía humana.\nAnotaciones sobre laberinto y tierra # Referencia del proyecto\nEn el proyecto anteriormente mencionado de nuestro laberinto, y referido a publicaciones en github y videos de Youtube, se indica que la mayoría de codigo sé tomo de estas referencias, no obstante esto viene acompañado de una buena referencias en normas APA que sé pueden encontrar en las referencias bibliográficas. Como parte importante de nuestra formación académica adaptamos estos códigos a nuestro beneficio dándole un toque más personal y académico.. Sin embargo, sé puede crear un ambiente de falta de explicación la cual trae consigo malentendidos. No obstante en forma de aclaratoria el código anteriormente mencionado tiene comentarios los cuales explican las respectivas adaptaciones que realizamos como grupo.\nConclusiones y trabajo a futuro # WebGL es una tecnología diseñada para trabajar directamente con la GPU y puede resultar demasiado tedioso y difícil de usar directamente sin algunas librerías de utilidad, La carga de escenas gráficas y objetos 3D en los formatos convencionales también es tedioso por lo que se han creado las bibliotecas JavaScript o algunas importadas a WebGL, para aportar esta funcionalidad adicional.\nBibliografía # Getting started with WebGL in p5 · processing/p5.js Wiki. (n.d.). GitHub. Retrieved October 12, 2022, from por Processing Foundation Centro de vuelo espacial Goddard de la NASA (Goddard Space Flight Center, \u0026amp; inglés), E. (2019, febrero 25). 10 Cosas: Lo que aprendemos sobre la Tierra estudiando la Luna. NASA Solar System Exploration. , Por Isabelle Yan P5.Js web editor. (s/f). P5js.org. Recuperado el 10 de octubre de 2022, de, Por P5.js Org P3D. Processing. Recuperado el 12 de octubre de 2022, de , Por Shiffman, D. Ham, O. (s/f). Raycasting-basics. README.Md at main · Jeff-Aporta/tierra. (s/f). "},{"id":22,"href":"/RGB/docs/Talleres/Photomosaic/","title":"Photomosaic","section":"Talleres","content":" Photomosaic # Ejercicio 1\nImplement a mosaic (or/and ascii art) visual application. Background # Fotomosaico # En el campo de las imágenes y la fotografía, un fotomosaico es una imagen usualmente una fotografía que ha sido dividida en secciones rectangulares (usualmente del mismo tamaño), tal como es compuesto un mosaico tradicional, con la característica de que cada elemento del mosaico es reemplazado por otra fotografía con colores promedios apropiados al elemento de la imagen original. Cuando es vista en detalle, los píxeles individuales se ven como la imagen principal, sin embargo al verla como un todo, es posible apreciar que la imagen está compuesta por cientos de miles de imágenes.\nIdea # En el tipo más avanzado de mosaico fotográfico, la imagen de destino no se reduce, y la coincidencia se realiza comparando cada píxel del rectángulo con el píxel correspondiente de cada imagen de la biblioteca. El rectángulo del objetivo se sustituye por la imagen de la biblioteca que minimiza la diferencia total. Esto requiere muchos más cálculos que el tipo simple, pero los resultados pueden ser mucho mejores, ya que la comparación píxel a píxel puede conservar la resolución de la imagen de destino.\n¿Cómo crear fotomosaicos?\nLee las imagenes del dataset, que sustituirán los recuadros de la imagen original. Leer la imagen original y dividirla en recuadros M x N formando el mosaico. Para cada recuadro, encuentra la mejor coincidencia de las imagenes del dataset. Crea el fotomosaico final disponiendo de las imagenes del dataset seleccionadas. División de la imagen original en partes más pequeñas # Promediando los valores de los colores # Cada píxel de una imagen tiene un color que puede ser representado por sus valores de rojo, verde y azul. En este caso, se están utilizando imágenes de 8 bits, por lo que cada uno de estos componentes tiene un valor de 8 bits en el rango [0, 255]. Dada una imagen con un total de N píxeles, el promedio RGB se calcula de la siguiente manera:\nEligiendo la mejor imagen para un recuadro # Para el fotomosaico, hay que encontrar una imagen coincidente entre las imágenes del dataset. Para determinar si la imágen coincide con el recuadro seleccionado, utilice los valores RGB medios. La coincidencia más cercana es la imagen con el valor RGB medio más próximo.\nImplementación # Imagen original # Dataset # Los colores de cada imagen se guardan en un archivo TXT, estos serán precargados para puedan ser analizados y obtener su repesentación de color RGB. Implementation of the Floyd-Steinberg Dithering algorithm let picture; let w_scaled; let h_scaled; let availableColors; let dataset= []; let loadedImages = []; const scaleFactor = 6; const datasetSize =70; function preload() { const location = \u0026#39;imagen\u0026#39; picture = loadImage(location); loadStrings(\u0026#39;dataset.txt\u0026#39;,loadDataset) noLoop() } function setup() { createCanvas(600, 600); noLoop(); } function draw() { w_scaled = Math.floor(picture.width / scaleFactor); h_scaled = Math.floor(picture.height / scaleFactor); picture.resize(w_scaled,h_scaled); picture.loadPixels(); for(let x = 0; x \u0026lt; w_scaled; x++) { for(let y = 0; y \u0026lt; h_scaled; y++) { const [r, g, b] = picture.get(x, y); const index = closestColor(r,g,b); const pixelImage = loadedImages[index]; image(pixelImage,x*scaleFactor, y*scaleFactor); } } } Fotomosaico # Fotomosaico por hardware # Bibliografía: # Artensoft. Archives of sample photos for photomosaic -Archive with christmas images. Recuperado el 12 de noviembre de 2022, de https://www.artensoft.com/ArtensoftPhotoMosaicWizard/photobases.php\ngeeksforgeeks. Implementing Photomosaics by Subhajit Saha.. Recuperado el 12 de noviembre de 2022, de https://www.geeksforgeeks.org/implementing-photomosaics/\nGithub. Photo mosaic, SuperIRis . Recuperado el 12 de noviembre de 2022, de https://github.com/SuperIRis/photomosaic\nDEV. Convert images to mosaics in p5.js, \u0026amp;y H. Golang. Recuperado el 12 de noviembre de 2022, de https://dev.to/andyhaskell/convert-images-to-mosaics-in-p5js-2dlc\n"},{"id":23,"href":"/RGB/docs/Talleres/Procedural-texturing/","title":"Procedural Texturing","section":"Talleres","content":" Procedural texturing # En gráficos por computadora , una textura de procedimiento es una textura creada utilizando una descripción matemática (es decir, un algoritmo ) en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo costo de almacenamiento, la resolución ilimitada de texturas y el fácil mapeo de texturas . [2] Este tipo de texturas se utilizan a menudo para modelar superficies o representaciones volumétricas de elementos naturales como madera , mármol , granito , metal , piedra y otros.\nframe buffer object # La arquitectura de objeto de búfer de fotogramas (FBO) es una extensión de OpenGL para realizar una representación flexible fuera de la pantalla, incluida la representación en una textura . Al capturar imágenes que normalmente se dibujarán en la pantalla, se puede usar para implementar una gran variedad de filtros de imagen y efectos de procesamiento posterior. El FBO es análogo al modelo de destinos de representación en DirectX . Se utiliza en OpenGL por su eficiencia y facilidad de uso. El uso de FBO no sufre la sobrecarga asociada con el cambio de contexto de dibujo de OpenGL y ha reemplazado en gran medida al buffer y otros métodos que implican cambios de contexto.\nEl FBO tiene dos usos principales: el procesamiento posterior de imágenes renderizadas y la composición entre diferentes escenas. Algunos ejemplos son:\nLa imagen renderizada se captura y se somete a Fragment Shaders u otras manipulaciones. Esto permite que se lleven a cabo muchos de los efectos de gráficos por computadora populares de hoy en día, incluida la adición de un efecto de desenfoque o floración. Se puede usar para crear vistas de otras escenas, por ejemplo: un televisor en una casa que muestra la vista desde una cámara secundaria. Una escena se puede renderizar a través de un FBO a una textura, luego esa textura se puede aplicar a la superficie de un televisor. Esto a veces se llama \u0026ldquo;Renderizar la textura\u0026rdquo; o RTT. Ventajas sobre otros métodos # Los métodos que involucran al FBO se consideran superiores porque:\nEs más fácil de configurar que la mayoría de los otros métodos. No requiere cambio de contexto. Es más eficiente porque los recursos se comparten dentro del mismo contexto. Es más flexible porque se puede adquirir todo el búfer de profundidad , el búfer de plantilla , etc. The Book of Shaders # Patrones: Dado que los programas de sombreado se ejecutan píxel por píxel, no importa cuánto repita una forma, el número de cálculos permanece constante. Esto significa que los sombreadores de fragmentos son particularmente adecuados para patrones de mosaico.\nTrabajo Realizado y a futuro: # Como trabajo realizado tenemos por resumen la implementación de frags, los cuales sé encontraron en su mayoría en él libro guía, no obstante se adecuo de tal manera que sé puedan ver los distintos patrones acompañados de una interfaz más amena al público en general. Por último un trabajo a futuro es la implementación de los shaders aplicados a proyectos orientados a objetos donde son de suma importancia estos patrones.\n"},{"id":24,"href":"/RGB/docs/Talleres/visual_ilusions/","title":"Visual Ilusions","section":"Talleres","content":" Taller # 1 # Visual illusions workshop # Estudiar, implementar y discutir posibles aplicaciones de algunos fenómenos visuales conocidos e ilusiones ópticas.\nPlanteamiento del Problema # Identificar, implementar y discutir posibles aplicaciones de algunas ilusiones ópticas conocidas en el diseño y desarrollo de gráficos por computadora.\nBackground # Una ilusión visual es una imagen que engaña al sistema visual, desde el ojo al cerebro, y lo lleva a percibir la realidad de forma distorsionada. Las ilusiones visuales pueden suceder de manera natural o ser creadas por efectos visuales específicos. Este es el resultado del análisis de la información que se recibe del sistema visual. Este puede hacer que se perciba un objeto que no está presente, dando una imagen distorsionada de la realidad. Estas se producen cuando se presentan varias formas en una imagen única y nuestro cerebro entra en conflicto.\nImplementación # Se implementaran algunas ilusiones ópticas como ejemplos # Frisén’s Lazy Shadow Este fenómeno se percibe mejor en condiciones de iluminación algo tenues. Observe rectángulo brillante giratorio Observe el \u0026ldquo;rectángulo de sombra\u0026rdquo; azul oscuro más grande, que también gira, detrás de él. Ambos giran con la misma velocidad, pero ¿están completamente alineados? [En el par de pentágonos de muestra a la derecha, solo el par izquierdo está \u0026lsquo;alineado\u0026rsquo;.] Con el control deslizante puede ajustar la alineación relativa. Debajo del control deslizante, se proporciona el ángulo de alineación, para mí alrededor de -2.5 ° parece alineado. Una vez que esté satisfecho con la coincidencia, presione \u0026rsquo; Detener \u0026rsquo; o marque la casilla de verificación \u0026rsquo; fondo claro\nCODE let angulo; let speed; let rot; let stopButton; let startButton; let speedSlider; let rotSlider; let lightBackground; function stop() { speedSlider.value(0); } function start() { speedSlider.value(0.05); } function preload() { img = loadImage(\u0026#34;https://cdn-icons-png.flaticon.com/512/748/748113.png\u0026#34;); } function setup() { createCanvas(500, 500); noStroke(); startButton = createButton(\u0026#39;Start\u0026#39;); startButton.position(0, 0); startButton.size(100, 30); startButton.mousePressed(start); stopButton = createButton(\u0026#39;Stop\u0026#39;); stopButton.position(0, 35); stopButton.size(100, 30); stopButton.mousePressed(stop); speedSlider = createSlider(0, 0.5, 0.1, 0.01); speedSlider.position(0, 85); speedSlider.size(100, 30); rotSlider = createSlider(-0.1, 0.1, 0, 0.01); rotSlider.position(0, 130); rotSlider.size(100, 30); lightBackground = createCheckbox(\u0026#39;Light Background\u0026#39;, false); lightBackground.position(0, 180); lightBackground.style(\u0026#39;color\u0026#39;, \u0026#39;#fff\u0026#39;); lightBackground.size(150, 30); angulo = 0; rectMode(CENTER); } function draw() { background(0); if (lightBackground.checked()) { fill(\u0026#34;rgb(160,250,174)\u0026#34;); circle(250, 250, 300); } speed = speedSlider.value(); rot = rotSlider.value(); angulo = angulo + speed % TWO_PI; translate(width / 2, height / 2); rotate(angulo); fill(0,0,255); rect(0, 0, 130, 130); rotate(rot); fill(255); rect(0, 0, 110, 110); fill(200,200,200); rotate(-angulo-rot); text(\u0026#34;Speed\u0026#34;, -225, -170); text(\u0026#34;Compensate\u0026#34;, -240, -125); rotate(PI/4); image(img, -3, -3, 6, 6); } Ilussion #2 # Ilusión de Cascada # La ilusión de cascada, o el efecto secundario del movimiento, es una ilusión de movimiento. Se experimenta después de ver un estímulo que se mueve en una dirección durante algún tiempo y luego mirar una escena estacionaria. La escena estacionaria parece tener movimiento (en la dirección opuesta al estímulo en movimiento que uno vio previamente). Esto se llama la \u0026ldquo;ilusión de la cascada\u0026rdquo;, ya que se puede experimentar después de observar el movimiento del agua en una cascada y luego prestar atención a una escena estacionaria, estas ilusiones de este tipo se conocían mucho antes del siglo XIX. De hecho, el filósofo griego Aristóteles (384 – 322 a. C.) informó sobre tales ilusiones más de 2000 años antes de Addams: “cuando las personas dejan de mirar objetos en movimiento, por ejemplo, ríos, y especialmente aquellos que fluyen muy rápidamente, descubren que el los estímulos visuales todavía se presentan, porque las cosas que realmente están en reposo se ven luego en movimiento”.\nCódigo y su respectiva Solución: # CODE let angle = 0; function setup() { createCanvas(700, 700); strokeWeight(4) } function draw() { background(50); noStroke(); fill(255,0,0) ellipse(width/2, height/2, 10,10) for(let i = 15; i\u0026lt; 5000; i+=15) { push() translate(width/2,height/2) rotate(i+ angle * 2) noFill() stroke(20 , i * 100, i -100) ellipse(0, 0, i + 15 , i ) pop() angle += 0.0003 } } Ilusion 3 # Stepping Feet: # Observa el movimiento de los “pies” azules y amarillos. Los pies parecen caminar alternativamente, como pies diminutos haciendo tip-tap-tip-tap… Esto es más pronunciado si no miras directamente a los pies, sino entre ellos.\nEn realidad su movimiento es siempre simultáneo. Encuentro este fenómeno particularmente lindo. La naturaleza de su movimiento es evidente: se mueven de manera constante y conjunta. Esta ilusión fue demostrada originalmente por Stuart Anstis en 2003. La causa real de esta ilusión todavía se está debatiendo.\nCódigo y su Solución: # CODE let checkbox; var barsColor; var start, speedSlider, direction; const feetHeight = 25, feetWidth = 80; function setup() { createCanvas(700, 300); start = 0; noStroke(); // Checkbox to toggle the background. checkbox = createCheckbox(\u0026#39;background\u0026#39;, true); checkbox.changed(backgroundCheckbox); // Start with the bars being drawn. barsColor = color(\u0026#39;black\u0026#39;); direction = 1; // Slider for the feet speed. speedSlider = createSlider(0, 100, 25); speedSlider.position(10, height + 20); speedSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); } function draw() { background(220); const number_of_bars = 40; // Draw the bars using the color from the checkbox. for( var i = 0 ; i \u0026lt; number_of_bars ; i ++ ){ if( i%2 == 0 ) fill(barsColor); else fill(\u0026#39;white\u0026#39;); var x = (width/number_of_bars) * i; rect(x, 0, width/number_of_bars, height); } // Draw the feet. fill(\u0026#39;yellow\u0026#39;); rect(start, 100, feetWidth, feetHeight); fill(\u0026#39;blue\u0026#39;); rect(start, 200, feetWidth, feetHeight); // Update the position of the feet. var speed = speedSlider.value() / 100 * 2; // Update the direction if necessary. if( start + feetWidth + speed * direction \u0026gt; width || start + speed * direction \u0026lt; 0 ) direction *= -1; start += speed * direction; } function backgroundCheckbox() { // If the chack box is active, draw the black bars. if (checkbox.checked()) { barsColor = color(\u0026#39;black\u0026#39;); } else { barsColor = color(\u0026#39;white\u0026#39;); } } Conclusiones: # Frisén’s Lazy Shadow el cerebro intenta ajustar la sombra a la superficie, por lo que se logra obtener la ilusión óptica. para esto la velocidad del ajuste es muy importante,ya que si no es la adecuada, no podemos ajustar la sombra a la superficie y no observamos la ilusión\nIlusión de Cascada: En conclusión, la cuestión de cómo es someterse a la ilusión de la cascada aún no está resuelta. Podría implicar simplemente experimentar cosas moviéndose en la dirección opuesta al estímulo y cambiando de posición. Podría implicar experimentar cosas que se mueven en la dirección opuesta al estímulo y, sin embargo, no cambiar de posición. O podría implicar algo más complejo. Por ejemplo, podría implicar experimentar cosas que se mueven y cambian de posición fuera del centro del campo visual pero que no se mueven en el centro. O podría implicar experimentar cosas moviéndose y cambiando de posición, pero luego volver a saltar a la posición original antes de cambiar de posición nuevamente.\nStepping Feet: Anule la selección de la casilla de verificación \u0026quot; Color \u0026ldquo;. Ahora se vuelve obvio que los bordes del \u0026lsquo;pie\u0026rsquo; claro se fusionan con las barras claras y solo son visibles cuando atraviesan las barras oscuras. Así que la mitad del tiempo realmente no hay señal de movimiento, y la percepción entra por defecto, es decir, no hay movimiento. Para el pie oscuro vale lo mismo, solo que en tiempos alternos. Con un contraste reducido de la rejilla, la equilibración de los bordes y la rejilla ya no está presente, por lo que el efecto desaparece. El movimiento “similar a un gusano” para un número impar de barras por pie también se explica automáticamente.\nBibliografía: # Waterfall illusion. (s/f). The Illusions Index. Recuperado el 6 de septiembre de 2022, de https://www-illusionsindex-org.translate.goog/ir/waterfall-illusion?_x_tr_sl=auto\u0026_x_tr_tl=es\u0026_x_tr_hl=es-419\nBach, M. (s/f). “Stepping feet” motion illusion. Michaelbach.de. Recuperado el 6 de septiembre de 2022, de https://michaelbach.de/ot/mot-feetLin/\nMichael\u0026rsquo;s Visual Phenomena \u0026amp; Optical Illusions. Recuperado el 6 de septiembre de 2022, de https://michaelbach.de/ot/lum-lazyShadow/7\n"},{"id":25,"href":"/RGB/docs/Talleres/visual_Masking/","title":"Visual Masking","section":"Talleres","content":" Taller 2 : Visual Masking # Planteamiento del problema # Identificar, implementar y discutir posibles aplicaciones de algunas ilusiones ópticas conocidas en el diseño y desarrollo de gráficos por computadora.\nMáscaras de convolución # Explicación visual : # En matemáticas (en particular, análisis funcional), la convolución es una operación matemática sobre dos funciones (f y g) que produce una tercera función (f * g) que expresa cómo la forma de una es modificada por la otra. El término conv olución se refiere tanto a la función de resultado como al proceso de calcularla. Se define como la integral del producto de las dos funciones después de que una se refleja sobre el eje y y se desplaza. La elección de qué función se refleja y desplaza antes de la integral no cambia el resultado de la integral (ver conmutatividad). La integral se evalúa para todos los valores de desplazamiento, produciendo la función de convolución.\nCódigo y su Solución: # CODE // this class describes the structure // and movents of the brick class Brick{ constructor(bc, y){ this.brickColor = bc; this.yPos = y; this.xPos = 0; } // this function creates the brick createBrick(){ fill(this.brickColor); rect(this.xPos, this.yPos, 100, 50); } // this function sets the speed // of movement of the brick to 1 setSpeed(){ this.xSpeed = 1; } // this function set the bricks in motion moveBrick(){ this.xPos+=this.xSpeed; if(this.xPos+100 \u0026gt;= width || this.xPos \u0026lt;= 0){ this.xSpeed*=-1; } } } function setup() { createCanvas(720, 400); createP(\u0026#34;Keep the mouse clicked\u0026#34;).style(\u0026#39;color\u0026#39;,\u0026#39;#ffffff\u0026#39;); createP(\u0026#34;to check whether the bricks\u0026#34;).style(\u0026#39;color\u0026#39;,\u0026#39;#ffffff\u0026#39;); createP(\u0026#34;are moving at same speed or not\u0026#34;).style(\u0026#39;color\u0026#39;,\u0026#39;#ffffff\u0026#39;); } // creating two bricks of // colors white and black let brick1 = new Brick(\u0026#34;white\u0026#34;,100); let brick2 = new Brick(\u0026#34;black\u0026#34;,250); // brick1.setSpeed(); brick2.setSpeed(); function draw () { background(0); if(mouseIsPressed){ background(50); } brick1.createBrick(); brick1.moveBrick(); if(!mouseIsPressed){ createBars(); } brick2.createBrick(); brick2.moveBrick(); } // this function creates the black and // white bars across the screen function createBars() { let len = 12; for(let i = 0;i\u0026lt; width/len;i++){ fill(\u0026#34;white\u0026#34;); if(i%2 == 0) rect(i*len,height,len,-height); } } Image Kernel # En el procesamiento de imágenes, un núcleo, una matriz de convolución o una máscara es una matriz pequeña que se utiliza para desenfocar, agudizar, grabar, detectar bordes y más. Esto se logra haciendo una convolución entre el kernel y una imagen.\nConvolution : # La convolución es el proceso de agregar cada elemento de la imagen a sus vecinos locales, ponderados por el kernel. Esto está relacionado con una forma de convolución matemática. La operación de matriz que se está realizando, la convolución, no es una multiplicación de matriz tradicional, a pesar de que se indica de manera similar con *.\nPor ejemplo, si tenemos dos matrices de tres por tres, la primera es un kernel y la segunda una pieza de imagen, la convolución es el proceso de invertir tanto las filas como las columnas del kernel y multiplicar localmente entradas y sumas similares. El elemento en las coordenadas [2, 2] (es decir, el elemento central) de la imagen resultante sería una combinación ponderada de todas las entradas de la matriz de la imagen, con pesos dados por el kernel:\nCódigo y su Solución: # CODE let img; let w = 80; // It\u0026#39;s possible to convolve the image with many different // matrices to produce different effects. This is a high-pass // filter; it accentuates the edges. const matrix = [ [ -1, -1, -1 ], [ -1, 9, -1 ], [ -1, -1, -1 ] ]; function preload() { img = loadImage(\u0026#39;https://i.imgur.com/drZGUWw.png\u0026#39;); } function setup() { createCanvas(720, 400); img.loadPixels(); // pixelDensity(1) for not scaling pixel density to display density // for more information, check the reference of pixelDensity() pixelDensity(1); } function draw() { // We\u0026#39;re only going to process a portion of the image // so let\u0026#39;s set the whole image as the background first background(img); // Calculate the small rectangle we will process const xstart = constrain(mouseX - w/2, 0, img.width); const ystart = constrain(mouseY - w/2, 0, img.height); const xend = constrain(mouseX + w/2, 0, img.width); const yend = constrain(mouseY + w/2, 0, img.height); const matrixsize = 3; loadPixels(); // Begin our loop for every pixel in the smaller image for (let x = xstart; x \u0026lt; xend; x++) { for (let y = ystart; y \u0026lt; yend; y++ ) { let c = convolution(x, y, matrix, matrixsize, img); // retrieve the RGBA values from c and update pixels() let loc = (x + y*img.width) * 4; pixels[loc] = red(c); pixels[loc + 1] = green(c); pixels[loc + 2] = blue(c); pixels[loc + 3] = alpha(c); } } updatePixels(); } function convolution(x, y, matrix, matrixsize, img) { let rtotal = 0.0; let gtotal = 0.0; let btotal = 0.0; const offset = Math.floor(matrixsize / 2); for (let i = 0; i \u0026lt; matrixsize; i++){ for (let j = 0; j \u0026lt; matrixsize; j++){ // What pixel are we testing const xloc = (x + i - offset); const yloc = (y + j - offset); let loc = (xloc + img.width * yloc) * 4; // Make sure we haven\u0026#39;t walked off our image, we could do better here loc = constrain(loc, 0 , img.pixels.length - 1); // Calculate the convolution // retrieve RGB values rtotal += (img.pixels[loc]) * matrix[i][j]; gtotal += (img.pixels[loc + 1]) * matrix[i][j]; btotal += (img.pixels[loc + 2]) * matrix[i][j]; } } // Make sure RGB is within range rtotal = constrain(rtotal, 0, 255); gtotal = constrain(gtotal, 0, 255); btotal = constrain(btotal, 0, 255); // Return the resulting color return color(rtotal, gtotal, btotal); } The coffee shop wall illusion # Esta ilusión de pared de cafetería ha saltado repetidamente del plano geométrico al mundo real en diferentes cafeterías o ubicaciones, gracias al atractivo visual que representa.\nDe hecho, uno de los libros más consultados por los amantes de las ilusiones ópticas ha sido escrito por Gregory y se titula El ojo y el cerebro, en el que, además de las aportaciones neurológicas, también aborda cuestiones de percepción, tema que ha inquietado. el autor a lo largo de su carrera profesional.\nEn esta ilusión de la pared de la cafetería todos los tramos son rectos, aunque la impresión es la contraria, ya que el contraste entre los tonos no permite visualizar claramente las líneas divisorias entre las filas. Por eso las pinturas crean la ilusión de ensancharse hacia los extremos.\nImage Histragram # Un histograma de imagen es un tipo de histograma que actúa como una representación gráfica de la distribución tonal en una imagen digital. Traza el número de píxeles para cada valor tonal. Al mirar el histograma de una imagen específica, un espectador podrá juzgar la distribución tonal completa de un vistazo\nCódigo y su Solución: # CODE function preload() { img = loadImage(\u0026#34;https://i.imgur.com/h016LEA.jpg\u0026#34;); // Load the image } function setup() { createCanvas(600, 600); background(255); img.resize(0,400); var maxRange = 256 colorMode(HSL, maxRange); image(img, 0, 0); var histogram = new Array(maxRange); for (i = 0; i \u0026lt;= maxRange; i++) { histogram[i] = 0 } loadPixels(); for (var x = 0; x \u0026lt; img.width; x+=5) { for (var y = 0; y \u0026lt; img.height; y+=5) { var loc = (x + y * img.width) * 4; var h = pixels[loc]; var s = pixels[loc + 1]; var l = pixels[loc + 2]; var a = pixels[loc + 3]; b = int(l); histogram[b]++ } } //img.filter(GRAY); image(img, 0, 0); stroke(300,100,80) push() translate(10,0) for (x = 0; x \u0026lt;= maxRange; x++) { index = histogram[x]; y1=int(map(index, 0, max(histogram), height, height-200)); y2 = height xPos = map(x,0,maxRange,0, width-20) line(xPos, y1, xPos, y2); } pop() } "}]